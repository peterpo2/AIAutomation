generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "darwin", "darwin-arm64", "windows", "linux-musl-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  role       String
  createdAt  DateTime @default(now()) @map("created_at")
  videos     Video[]
  automationLayouts AutomationLayout[]
}

model Video {
  id         String   @id @default(uuid())
  fileName   String   @map("file_name")
  folderPath String   @map("folder_path")
  dropboxId  String   @map("dropbox_id")
  size       BigInt
  status     VideoStatus
  brand      String?
  caption    String?  @db.Text
  category   String?
  hashtags   String?  @db.Text
  captionGeneratedAt DateTime? @map("caption_generated_at")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @map("user_id")
}

enum VideoStatus {
  pending
  ready
  uploaded
}

model JobsLog {
  id         Int      @id @default(autoincrement())
  jobName    String   @map("job_name")
  status     String
  executedAt DateTime @default(now()) @map("executed_at")
  @@map("jobs_log")
}

model AutomationLayout {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  automationCode String   @map("automation_code")
  positionX      Float    @map("position_x")
  positionY      Float    @map("position_y")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, automationCode], map: "automation_layout_user_code_key")
  @@map("automation_layouts")
}

model Automation {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  name        String
  description String
  status      String
  webhookUrl  String?      @map("webhook_url")
  lastRun     DateTime?    @map("last_run")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  kind        String       @default("webhook")
  metadata    Json?        @map("metadata")

  executions  Execution[]

  @@map("automations")
}

model Execution {
  id           Int        @id @default(autoincrement())
  automationId Int        @map("automation_id")
  status       String
  result       Json?      @map("result")
  logs         String?    @db.Text
  startedAt    DateTime?  @map("started_at")
  finishedAt   DateTime?  @map("finished_at")
  createdAt    DateTime   @default(now()) @map("created_at")

  automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@map("executions")
}

model MediaAsset {
  id         Int      @id @default(autoincrement())
  dropboxId  String   @unique @map("dropbox_id")
  client     String   @map("client")
  month      String?  @map("month")
  videoPath  String   @map("video_path")
  status     String   @default("downloaded") @map("status")
  fileName   String   @map("file_name")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("media_assets")
}
