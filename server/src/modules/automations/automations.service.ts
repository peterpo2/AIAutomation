import OpenAI from 'openai';

export interface AutomationNode {
  code: string;
  step: string;
  title: string;
  description: string;
  function: string;
  aiAssist: string;
  status: 'operational' | 'monitor' | 'upcoming';
  statusLabel: string;
  sequence: number;
  dependencies: string[];
  deliverables: string[];
}

const automationNodes: AutomationNode[] = [
  {
    code: 'CCC',
    step: 'Content Calendar Creation',
    title: 'AI Content Planner',
    description: 'Inputs briefs and brand data to propose a weekly narrative arc with per-platform messaging.',
    function: 'Generates channel-ready post calendars and creative prompts.',
    aiAssist: 'Strategic ideation using OpenAI for voice, hooks, and CTA matching.',
    status: 'operational',
    statusLabel: 'Live · Updated daily with the latest briefs.',
    sequence: 1,
    dependencies: [],
    deliverables: ['Campaign calendar', 'Concept moodboard', 'Copy angle matrix'],
  },
  {
    code: 'VPE',
    step: 'Video Production & Editing',
    title: 'Hybrid Video Team',
    description: 'Pairs human editors with the AI caption assistant to accelerate turnaround.',
    function: 'Produces ready-to-upload clips with optimized captions and aspect ratios.',
    aiAssist: 'Caption drafts and hook variations are generated via OpenAI for review.',
    status: 'operational',
    statusLabel: 'On track · Average turnaround 6h.',
    sequence: 2,
    dependencies: ['CCC'],
    deliverables: ['Edited video masters', 'Auto-caption files', 'Thumbnail concepts'],
  },
  {
    code: 'USP',
    step: 'Upload Schedule Planning',
    title: 'Scheduler Engine',
    description: 'Analyses engagement trends to propose optimal posting windows across markets.',
    function: 'Calculates best publish times per asset and queues reminders.',
    aiAssist: 'OpenAI summarises engagement anomalies and suggests experiments.',
    status: 'monitor',
    statusLabel: 'Monitoring · Needs fresh engagement dataset.',
    sequence: 3,
    dependencies: ['VPE'],
    deliverables: ['Posting matrix', 'Audience overlap report'],
  },
  {
    code: 'UMS',
    step: 'Upload Management System',
    title: 'Content Manager Module',
    description: 'Securely stores final assets with captions and metadata ready for deployment.',
    function: 'Maintains the upload queue and version control for creative assets.',
    aiAssist: 'Metadata validation and tone checks executed with OpenAI.',
    status: 'operational',
    statusLabel: 'Stable · Queue capacity at 68%.',
    sequence: 4,
    dependencies: ['USP'],
    deliverables: ['Upload-ready bundles', 'Metadata QA checklist'],
  },
  {
    code: 'AL',
    step: 'Account Linking',
    title: 'TikTok Auth Connector',
    description: 'Handles OAuth 2.0 and token storage per client workspace.',
    function: 'Ensures tokens are refreshed and scoped correctly for publishing.',
    aiAssist: 'OpenAI drafts security notifications and scope explanations.',
    status: 'operational',
    statusLabel: 'Healthy · Tokens refreshed automatically.',
    sequence: 5,
    dependencies: ['UMS'],
    deliverables: ['Active OAuth tokens', 'Security audit logs'],
  },
  {
    code: 'AR',
    step: 'Automation Rules',
    title: 'Workflow Automation Engine',
    description: 'Evaluates triggers, fallbacks, and notifications before pushing to runtime.',
    function: 'Determines upload eligibility, handles retries, and routes alerts.',
    aiAssist: 'Anomaly narratives and post-mortems generated by OpenAI.',
    status: 'monitor',
    statusLabel: 'Monitoring · Reviewing recent retry spikes.',
    sequence: 6,
    dependencies: ['AL'],
    deliverables: ['Rule manifests', 'Escalation briefs'],
  },
  {
    code: 'WAU',
    step: 'Weekly Auto Uploads',
    title: 'Scheduler Runtime Node',
    description: 'Executes scheduled posts via the TikTok API with health checks.',
    function: 'Publishes approved assets and tracks outcome confirmations.',
    aiAssist: 'OpenAI crafts failure remediation guidance for the ops team.',
    status: 'monitor',
    statusLabel: 'Monitoring · Awaiting green-light from Automation Rules.',
    sequence: 7,
    dependencies: ['AR'],
    deliverables: ['Deployment receipts', 'Fallback queue status'],
  },
  {
    code: 'MAO',
    step: 'Monitoring & Optimization',
    title: 'Analytics Engine',
    description: 'Collects performance metrics and distributes actionable intelligence.',
    function: 'Generates weekly optimisation reports and experimentation prompts.',
    aiAssist: 'Insight summaries, next-best-actions, and scripts are authored with OpenAI.',
    status: 'upcoming',
    statusLabel: 'Scheduled · Next sync Friday 09:00.',
    sequence: 8,
    dependencies: ['WAU'],
    deliverables: ['Performance dashboard', 'Optimisation brief'],
  },
];

const getOpenAIClient = () => {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OPENAI_API_KEY missing');
  }
  return new OpenAI({ apiKey });
};

export const automationsService = {
  listNodes(): AutomationNode[] {
    return automationNodes;
  },

  async generateInsights({ focus }: { focus?: string }) {
    try {
      const openai = getOpenAIClient();
      const response = await openai.responses.create({
        model: 'gpt-4.1-mini',
        input: [
          {
            role: 'system',
            content:
              'You are an automation strategist for a creative agency. Provide concise, high-impact recommendations referencing the workflow nodes when relevant. Respond using markdown with short sections.',
          },
          {
            role: 'user',
            content: `Workflow nodes: ${automationNodes
              .map((node) => `${node.code} – ${node.title}: ${node.statusLabel}`)
              .join('; ')}. Focus on ${focus ?? 'overall pipeline performance'} and surface the next best actions, risk watchouts, and opportunities for OpenAI augmentation.`,
          },
        ],
      });

      if (response.output_text) {
        return response.output_text;
      }

      return 'Insights are not available at the moment. Please try again shortly.';
    } catch (error) {
      console.error('Failed to generate automation insights', error);
      return 'Insights are currently unavailable. Verify the OpenAI configuration and try again.';
    }
  },
};
